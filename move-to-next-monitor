#!/bin/bash
#
# Move the current window to the next monitor.
#
# Also works only on one X screen (which is the most common case).
#
# Props to
# http://icyrock.com/blog/2012/05/xubuntu-moving-windows-between-monitors/
#
# Unfortunately, both "xdotool getwindowgeometry --shell $window_id" and
# checking "-geometry" of "xwininfo -id $window_id" are not sufficient, as
# the first command does not respect panel/decoration offsets and the second
# will sometimes give a "-0-0" geometry. This is why we resort to "xwininfo".
#
# algorithm:
#  get_monitors dimensions and offset
#  get_current_window position and maximized status
#  find next monitor
#  compute new coordinate in the next monitor
#  move to the next monintor centered maxmize if it was
#
# bash array remainder: (Yes, array syntax is totally ugly)
#   # create an array
#   arr=( val1 val2 )
#   # get element 0
#   ${arr[0]}
#   # all elements
#   ${arr[@]}
#   # number of elements
#   ${#arr[@]}

[[ $0 != "$BASH_SOURCE" ]] && sourced=1 || sourced=0
if [[ $sourced -eq 0  ]]
then
  me=$(readlink -f $0)
else
  me=$(readlink -f "$BASH_SOURCE")
fi
mydir=$(dirname $me)

WINDOW_HORZ_MAXED=""
WINDOW_VERT_MAXED=""

# get_monitors output: See fake_get_monitors
# LVDS-1 1366 768 0 515
# OTHER 1280 1024 1366 0
# Usage: 
#   get_monitors
#   get_monitors SCREEN_NUM
get_monitors() {
  OFFSET_RE="([0-9]+)\+([0-9]+)"

  # $1 can number a monitor starting at 0
  range="p"
  if [[ ! -z "$1" ]]
  then
    range="$(($1+1)) p"
  fi

  # allow debug without dual screen
  if [[ "$fake" -eq 1 ]] ; then
    fake_get_monitors
  else
    xrandr | 
      sed -nr "/ connected / {
        s/^([^ ]*).*\b([0-9]+)x([0-9]+)\+$OFFSET_RE.*$/\1 \2 \3 \4 \5/ p
      }"
  fi | sed -n -e "$range"
}

fake_get_monitors() {
  echo LVDS-1 1366 768 0 572
  echo VGA-1 1280 1024 1366 0
}

get_current_window() {
  # current window_id
  xdotool getactivewindow
}


window_get_position() {
  local window_id=$1

  local pos=( `xdotool getwindowgeometry $window_id | awk -F '[ ,]+' '/Position:/ { print $3,$4 }'` )
  local dim=( `xdotool getwindowgeometry $window_id | awk -F '[ x]+' '/Geometry:/ { print $3,$4 }'` )

  if [[ "$fake" -eq 1 ]] ; then
    read sname swidth sheight sxoff syoff <<< $(get_monitors 0)
    pos[1]=$((${pos[1]} + $syoff))
  fi

  echo "${pos[@]} ${dim[@]}"
}

get_merged_display() {
  #xdpyinfo | grep dimensions:
  #  dimensions:    2646x1340 pixels (700x355 millimeters)
  # virtual screen monitor merged dimensions including offsets
  xdpyinfo | awk -F '[ x]+' '/dimensions:/ { print $3,$4}'
}

compute_window_center() {
  # array assign IFS must contains ' '
  local wpos=( $@ )
  echo $((${wpos[0]} + (${wpos[2]}) / 2)) $((${wpos[1]} + (${wpos[3]}) / 2))
}

window_compute_move() {
  local window_id=$1

  local nbscreen=$(get_monitors | wc -l)
  if [[ $nbscreen -eq 1 ]] ; then
    return 1
  fi

  local pos=( $(window_get_position $window_id) )
  #local center=( $(compute_window_center ${pos[@]}) )

  # off the border padding
  local padding=24

  local myscreen=$(find_which_monitor ${pos[@]})
  # multiple var assignment
  read sname swidth sheight sxoff syoff <<< $(get_monitors $myscreen)
  #echo $sname $swidth $sheight $sxoff $syoff

  # remove current screen offset
  local new_x=$((${pos[0]} - $sxoff))
  local new_y=$((${pos[1]} - $syoff))

  # Compute new position
  local nexts=$((($myscreen + 1) % $nbscreen))

  # add new screen offset
  read sname swidth sheight sxoff syoff <<< $(get_monitors $nexts)
  #echo $sname $swidth $sheight $sxoff $syoff
  new_x=$(($new_x + $sxoff))
  new_y=$(($new_y + $syoff))

  # ensure new position is in the screen, if window width and height is not
  # too big re integrate window in the screen

  # too far on right
  local maxx=$(($sxoff + $swidth))
  if [[ $(($new_x + ${pos[2]})) -gt $maxx ]] ; then
    new_x=$(($maxx - (${pos[2]} + $padding)))
  fi

  # too far on bottom
  local maxy=$(($syoff + $sheight))
  if [[ $(($new_y + ${pos[3]})) -gt $maxy ]] ; then
    new_y=$(($maxy - (${pos[3]} + $padding)))
  fi

  # off the screen coorection
  if [[ $new_x -lt $sxoff ]] ; then
    new_x=$(($padding + $sxoff))
  fi

  if [[ $new_y -lt $syoff ]] ; then
    new_y=$(($padding + $syoff))
  fi

  echo $new_x $new_y
}

find_which_monitor() {
  # array assign IFS must contains ' '
  local winpos=( $@ )
  #echo "${winpos[0]} ${winpos[1]} ${winpos[2]} ${winpos[3]}"
  # Loop through each screen and compare the offset with the window
  # coordinates.
  local i=0
  local monitor
  while read name width height xoff yoff
  do
    #echo MON: $name $width $height $xoff $yoff
    if [ "${winpos[0]}" -ge "$xoff" \
      -a "${winpos[1]}" -ge "$yoff" \
      -a "${winpos[0]}" -lt "$(($xoff+$width))" \
      -a "${winpos[1]}" -lt "$(($yoff+$height))" ]
    then
      monitor=$name   
      break
    fi
    i=$(($i + 1))
  done < <(get_monitors)

  # If we found a monitor, echo it out, otherwise print an error.
  if [[ ! -z "$monitor" ]]
  then
    echo $i
    return 0
  else
    echo "Couldn't find any monitor for the current window." >&2
    return 1
  fi
}

main() {
  # current window properties
  window_id=$(get_current_window)

  # Remember if it was maximized.
  WINDOW_HORZ_MAXED=`xprop -id $window_id _NET_WM_STATE \
    | grep '_NET_WM_STATE_MAXIMIZED_HORZ'`
  WINDOW_VERT_MAXED=`xprop -id $window_id _NET_WM_STATE \
    | grep '_NET_WM_STATE_MAXIMIZED_VERT'`

  new_coord=( $(window_compute_move $window_id) )

  # Un-maximize current window so that we can move it
  wmctrl -ir $window_id -b remove,maximized_vert,maximized_horz

  # Move the window
  xdotool windowmove $window_id ${new_coord[0]} ${new_coord[1]}

  # Maximize window again, if it was before
  if [ -n "${WINDOW_HORZ_MAXED}" -a -n "${WINDOW_VERT_MAXED}" ]; then
    wmctrl -ir $window_id -b add,maximized_vert,maximized_horz
  elif [ -n  "${WINDOW_HORZ_MAXED}" ]; then
    wmctrl -ir $window_id -b add,maximized_horz
  elif [ -n  "${WINDOW_VERT_MAXED}" ]; then
    wmctrl -ir $window_id -b add,maximized_vert
  fi
}


if [[ $sourced -eq 0  ]] ; then
  main "$@"
fi

